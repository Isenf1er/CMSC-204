import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.swing.JComponent;

/**
   A car shape that can be positioned anywhere on the screen.
*/
public class Car
{
   private int xLeft;
   private int yTop;
   JComponent component;

   /**
      Constructs a car with a given top left corner.
      @param x the x coordinate of the top left corner
      @param y the y coordinate of the top left corner
   */
   public Car(int x, int y, JComponent aComponent)
   {
      xLeft = x;
      yTop = y;
      component = aComponent;
   }

   /**
      Draws the car.
      @param g2 the graphics context
   */
   public void draw(Graphics2D g2, int xLeft, int yTop)
   {
	   try{
		   Rectangle body 
		   = new Rectangle(xLeft, yTop + 10, 60, 10);      
		   Ellipse2D.Double frontTire 
		   = new Ellipse2D.Double(xLeft + 10, yTop + 20, 10, 10);
		   Ellipse2D.Double rearTire
		   = new Ellipse2D.Double(xLeft + 40, yTop + 20, 10, 10);

		   // The bottom of the front windshield
		   Point2D.Double r1 
		   = new Point2D.Double(xLeft + 10, yTop + 10);
		   // The front of the roof
		   Point2D.Double r2 
		   = new Point2D.Double(xLeft + 20, yTop);
		   // The rear of the roof
		   Point2D.Double r3 
		   = new Point2D.Double(xLeft + 40, yTop);
		   // The bottom of the rear windshield
		   Point2D.Double r4 
		   = new Point2D.Double(xLeft + 50, yTop + 10);

		   Line2D.Double frontWindshield 
		   = new Line2D.Double(r1, r2);
		   Line2D.Double roofTop 
		   = new Line2D.Double(r2, r3);
		   Line2D.Double rearWindshield
		   = new Line2D.Double(r3, r4);

		   g2.draw(body);
		   g2.draw(frontTire);
		   g2.draw(rearTire);
		   g2.draw(frontWindshield);      
		   g2.draw(roofTop);      
		   g2.draw(rearWindshield); 
	   }
	   
	   finally
		  {
		  }
   }
}

import javax.swing.JFrame;

public class CarFrame
{
   public static void main(String[] args)
   {
      JFrame frame = new JFrame();

      frame.setSize(300, 400);
      frame.setTitle("Cars");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      CarQueue carQueue = new CarQueue();
      
      CarPanel component = new CarPanel(0,0,1, carQueue);
      frame.add(component);
      frame.setVisible(true);
      
      CarPanel component1 = new CarPanel(80,100,2, carQueue);
      frame.add(component1);
      frame.setVisible(true);
      
      CarPanel component2 = new CarPanel(30,200,3, carQueue);
      frame.add(component2);
      
      frame.setVisible(true);
      carQueue.addToQueue();
      component.startAnimation();
      component1.startAnimation();
      component2.startAnimation();
   }
}

import java.awt.Graphics;
import java.awt.Graphics2D;
import javax.swing.JComponent;

/**
   This component draws two car shapes.
*/
public class CarPanel extends JComponent
{  
	private Car car1;
	private int x,y, delay;
	private CarQueue carQueue;
	private int direction;
	
	CarPanel(int x1, int y1, int d, CarQueue queue)
	{
		delay = d;
        x=x1;
        y=y1;
        car1 = new Car(x, y, this);
        carQueue = queue;
	}
	public void startAnimation()
	   {
	      class AnimationRunnable implements Runnable
	      {
	         public void run()
	         {
	            try
	            {
	               for(int i=0;i<10;i++)
	               {
	            	   direction = carQueue.deleteQueue();
	            	   if(direction == 0) {
	            		   if(!(y < 0 && y > 300)) {
	            			   y += 10;
	            		   }
	            	   }
	            	   if(direction == 1) {
	            		   if(!(y > 300 && y < 0)) {
	            			   y -= 10;
	            		   }
	            	   }
	            	   if(direction == 2) {
	            		   if(x > 0) {
	            			   x -= 10;
	            		   }
	            	   }
	            	   if(direction == 3) {
	            		   System.out.println(x);
	            		   if(x < 180) {
	            			   x += 20;
	            		   }
	            	   }
	            	   repaint();
	            	   Thread.sleep(delay*100);
	               }
	            }
	            catch (InterruptedException exception)
	            {
	            	carQueue.addToQueue();
	            }
	            finally
	            {
	            	
	            }
	         }
	      }
	      
	      Runnable r = new AnimationRunnable();
	      Thread t = new Thread(r);
	      t.start();
	   }
	
   public void paintComponent(Graphics g)
   {  
      Graphics2D g2 = (Graphics2D) g;

      car1.draw(g2,x,y);    
   }
}

import java.util.Random;
import java.util.PriorityQueue;

public class CarQueue {
	Random rand = new Random();
	private int x;
	PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
	
	public CarQueue() {
		queue.add(rand.nextInt(4));
		queue.add(rand.nextInt(4));
		queue.add(rand.nextInt(4));
		queue.add(rand.nextInt(4));
		queue.add(rand.nextInt(4));
		queue.add(rand.nextInt(4));
	}
	
	public void addToQueue() {
		class runnableClass implements Runnable{
			public void run() {
				try {
					queue.add(rand.nextInt(4));
					queue.add(rand.nextInt(4));
					queue.add(rand.nextInt(4));
					queue.add(rand.nextInt(4));
					queue.add(rand.nextInt(4));
					queue.add(rand.nextInt(4));
				}finally {
					
				}
			}
		}
		Runnable run = new runnableClass();
		Thread thr = new Thread(run);
		thr.start();
	}
	
	public int deleteQueue() {
		class runnableClass implements Runnable{
			public void run() {
				try {
					Thread.sleep(2000);
				}catch(InterruptedException e) {
					
				}
				
				try {
					if(queue.size() < 20) {
						queue.add(rand.nextInt(4));
						queue.add(rand.nextInt(4));
						queue.add(rand.nextInt(4));
						queue.add(rand.nextInt(4));
						queue.add(rand.nextInt(4));
					}else if(!queue.isEmpty()) {
						x = queue.remove();
					}
				}finally {
					
				}
			}
		}
		Runnable run = new runnableClass();
		Thread thr = new Thread(run);
		thr.start();
		
		return x;
	}
}
