
public class NoUpperAlphaException extends Exception {

	public NoUpperAlphaException() {
		super("The password must contain at least one uppercase alphabetic character");
	}
	
}



import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;


/**
 * Test the methods of PasswordChecker
 * @author Professor Kartchner
 *
 */
public class PasswordChecker_GFA_Test {
	ArrayList<String> passwords;
	String password1, password2;

	@Before
	public void setUp() throws Exception {
		passwords = new ArrayList<String>();
	}

	@After
	public void tearDown() throws Exception {
		passwords = null;
	}
	
	/**
	 * Test if the password is valid 
	 */
	@Test
	public void testIsValidPassword()
	{
		try{
			assertEquals(true,PasswordCheckerUtility.isValidPassword("strongPWD1"));
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
			assertTrue("Threw some incorrect exception",false);
		}
	}
}

//package _solution;


import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * Test the methods of PasswordChecker
 * @author Professor Kartchner
 *
 */
public class PasswordCheckerTest {
	ArrayList<String> passwords;
	String password1, password2;

	@Before
	public void setUp() throws Exception {
		String[] p = {"334455BB", "Im2#cool4U", "george2ZZZ", "4sal#", "bertha22#", "4wardMarch#", 
				"august30", "abcdef", "Applesxx#", "aa11b", "pilotProject", "myPassword", 
				"myPassword2"};
		passwords = new ArrayList<String>();
		passwords.addAll(Arrays.asList(p)); // puts strings into the ArrayList
		
		
		/* ************* STUDENT  ***************
		   Create another Arraylist of String to
		   use for the testValidPasswordsSTUDENT test
		*/
	}

	@After
	public void tearDown() throws Exception {
		passwords = null;
	}

	/**
	 * Test if the password is less than 8 characters long.
	 * This test should throw a LengthException for second case.
	 */
	@Test
	public void testIsValidPasswordTooShort()
	{
		try{
			assertTrue(PasswordCheckerUtility.isValidPassword("abcABC12#"));
			PasswordCheckerUtility.isValidPassword("ab12#");
			assertTrue("Did not throw lengthException",false);
		}
		catch(LengthException e)
		{
			assertTrue("Successfully threw a lengthExcepetion",true);
		}
		catch(Exception e)
		{
			assertTrue("Threw some other exception besides lengthException",false);
		}
	}
	
	/**
	 * Test if the password has at least one uppercase alpha character
	 * This test should throw a NoUpperAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoUpperAlpha()
	{
		try{
			assertTrue(PasswordCheckerUtility.isValidPassword("1234567aA#"));
			PasswordCheckerUtility.isValidPassword("1234567a#");
			assertTrue("Did not throw NoUpperAlphaException",false);
		}
		catch(NoUpperAlphaException e)
		{
			assertTrue("Successfully threw a NoUpperAlphaExcepetion",true);
		}
		catch(Exception e)
		{
			assertTrue("Threw some other exception besides NoUpperAlphaException",false);
		}
	}
	
	/**
	 * Test if the password has at least one lowercase alpha character
	 * This test should throw a NoLowerAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoLowerAlpha()
	{
		try{
			assertTrue(PasswordCheckerUtility.isValidPassword("1234567Aa#"));
			PasswordCheckerUtility.isValidPassword("1234567A#");
			assertTrue("Did not throw NoLowerAlphaException",false);
		}
		catch(NoLowerAlphaException e)
		{
			assertTrue("Successfully threw a NoLowerAlphaExcepetion",true);
		}
		catch(Exception e)
		{
			assertTrue("Threw some other exception besides NoLowerAlphaException",false);
		}
	}
	/**
	 * Test if the password has at least one special symbol
	 * This test should throw a NoSpecialSymbolException for second case
	 */
	@Test
	public void testIsValidPasswordNoSpecialSymbol()
	{
		try{
			assertTrue(PasswordCheckerUtility.isValidPassword("1234567Aa#"));
			PasswordCheckerUtility.isValidPassword("1234567Aa"); 
			System.out.println("Did not throw a NoSpecialSymbolException");
			assertTrue("Did not throw NoSpecialSymbolException",false);
		}
		catch(NoSpecialSymbolException e)
		{
			System.out.println("Successfully threw a NoSpecialSymbolException");
			assertTrue("Successfully threw a NoSpecialSymbolException",true);
		}
		catch(Exception e)
		{
			System.out.println("Threw some other exception besides NoSpecialSymbolException");
			assertTrue("Threw some other exception besides NoSpecialSymbolException",false);
		}
	}
	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsWeakPassword()
	{
		try{
			assertEquals(true,PasswordCheckerUtility.isValidPassword("1234aaAA#"));
			boolean weakPwd = PasswordCheckerUtility.isWeakPassword("1234aaA#");
			assertTrue(weakPwd);
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
			assertTrue("Threw some incorrect exception",false);
		}
	}
	
	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsValidPasswordInvalidSequence()
	{
		try{
			assertEquals(true,PasswordCheckerUtility.isValidPassword("1234aaAA#"));
			PasswordCheckerUtility.isValidPassword("1234aAAA#");
			assertTrue("Did not throw an InvalidSequenceException",false);
		}
		catch(InvalidSequenceException e)
		{
			assertTrue("Successfully threw an InvalidSequenceExcepetion",true);
		}
		catch(Exception e)
		{
			System.out.println(e.getMessage());
			assertTrue("Threw some other exception besides an InvalidSequenceException",false);
		}
	}

	/**
	 * Test the getInvalidPasswords method
	 * Check the results of the ArrayList of Strings returned by the validPasswords method
	 */
	@Test
	public void testGetInvalidPasswords() {
		ArrayList<String> results;
		results = PasswordCheckerUtility.getInvalidPasswords(passwords);
		Scanner scan = new Scanner(results.get(0)); //
		assertEquals(scan.next(), "334455BB");
		String nextResults = scan.nextLine().toLowerCase();
		assertTrue(nextResults.contains("lowercase"));
		//assertEquals(scan.nextLine(), " The password must contain at least one lowercase alphabetic character.");
		scan = new Scanner(results.get(1)); //
		assertEquals(scan.next(), "george2ZZZ");
		nextResults = scan.nextLine().toLowerCase();
		assertTrue(nextResults.contains("special"));
		//assertEquals(scan.nextLine(), " The password cannot contain more than two of the same character in sequence.");
		scan = new Scanner(results.get(3)); //
		assertEquals(scan.next(), "bertha22#");
		nextResults = scan.nextLine().toLowerCase();
		assertTrue(nextResults.contains("uppercase"));
		//assertEquals(scan.nextLine(), " The password must contain at least one uppercase alphabetic character.");
		scan = new Scanner(results.get(5)); //
		assertEquals(scan.next(), "abcdef");
		nextResults = scan.nextLine().toLowerCase();
		assertTrue(nextResults.contains("uppercase") || nextResults.contains("digit"));
		//assertEquals(scan.nextLine(), " The password must contain at least one digit.");
		scan = new Scanner(results.get(6)); //a
		assertEquals(scan.next(), "Applesxx#");
		nextResults = scan.nextLine().toLowerCase();
		assertTrue(nextResults.contains("digit"));
		//assertEquals(scan.nextLine(), " The password must contain at least one digit.");

	}
	
	
}


import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * STUDENT tests for the methods of PasswordChecker
 * @author 
 *
 */
public class PasswordCheckerSTUDENT_Test {

	@Before
	public void setUp() throws Exception {
		
	}

	@After
	public void tearDown() throws Exception {
	
	}

	/**
	 * Test if the password is less than 8 characters long.
	 * This test should throw a LengthException for second case.
	 */
	@Test
	public void testIsValidPasswordTooShort()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test if the password has at least one uppercase alpha character
	 * This test should throw a NoUpperAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoUpperAlpha()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test if the password has at least one lowercase alpha character
	 * This test should throw a NoLowerAlphaException for second case
	 */
	@Test
	public void testIsValidPasswordNoLowerAlpha()
	{
		fail("Not implemented by student yet");
	}
	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsWeakPassword()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test if the password has more than 2 of the same character in sequence
	 * This test should throw a InvalidSequenceException for second case
	 */
	@Test
	public void testIsValidPasswordInvalidSequence()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test if the password has at least one digit
	 * One test should throw a NoDigitException
	 */
	@Test
	public void testIsValidPasswordNoDigit()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test correct passwords
	 * This test should not throw an exception
	 */
	@Test
	public void testIsValidPasswordSuccessful()
	{
		fail("Not implemented by student yet");
	}
	
	/**
	 * Test the invalidPasswords method
	 * Check the results of the ArrayList of Strings returned by the validPasswords method
	 */
	@Test
	public void testInvalidPasswords() {
		fail("Not implemented by student yet");
	}
	
}

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_38) on Wed Jul 12 18:52:45 CDT 2017 -->
<TITLE>
PasswordCheckerUtility
</TITLE>

<META NAME="date" CONTENT="2017-07-12">

<LINK REL ="stylesheet" TYPE="text/css" HREF="stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="PasswordCheckerUtility";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/PasswordCheckerUtility.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html?PasswordCheckerUtility.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="PasswordCheckerUtility.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<HR>
<!-- ======== START OF CLASS DATA ======== -->
<H2>
Class PasswordCheckerUtility</H2>
<PRE>
java.lang.Object
  <IMG SRC="./resources/inherit.gif" ALT="extended by "><B>PasswordCheckerUtility</B>
</PRE>
<HR>
<DL>
<DT><PRE>public final class <B>PasswordCheckerUtility</B><DT>extends java.lang.Object</DL>
</PRE>

<P>
<HR>

<P>

<!-- ======== CONSTRUCTOR SUMMARY ======== -->

<A NAME="constructor_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Constructor Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE><B><A HREF="PasswordCheckerUtility.html#PasswordCheckerUtility()">PasswordCheckerUtility</A></B>()</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
</TR>
</TABLE>
&nbsp;
<!-- ========== METHOD SUMMARY =========== -->

<A NAME="method_summary"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
<B>Method Summary</B></FONT></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="PasswordCheckerUtility.html#isValidPassword(java.lang.String)">isValidPassword</A></B>(java.lang.String&nbsp;passwordString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return true if valid, returns false if an invalid password</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;boolean</CODE></FONT></TD>
<TD><CODE><B><A HREF="PasswordCheckerUtility.html#isWeakPassword(java.lang.String)">isWeakPassword</A></B>(java.lang.String&nbsp;passwordString)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return true if length of password is greater or equal to 6 but less than or equal to 9</TD>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
<CODE>static&nbsp;java.util.ArrayList&lt;java.lang.String&gt;</CODE></FONT></TD>
<TD><CODE><B><A HREF="PasswordCheckerUtility.html#invalidPasswords(java.util.ArrayList)">invalidPasswords</A></B>(java.util.ArrayList&lt;java.lang.String&gt;&nbsp;passwords)</CODE>

<BR>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an arraylist of invalid passwords (weak passwords are not considered invalid)</TD>
</TR>
</TABLE>
&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
<TH ALIGN="left"><B>Methods inherited from class java.lang.Object</B></TH>
</TR>
<TR BGCOLOR="white" CLASS="TableRowColor">
<TD><CODE>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</CODE></TD>
</TR>
</TABLE>
&nbsp;
<P>

<!-- ========= CONSTRUCTOR DETAIL ======== -->

<A NAME="constructor_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Constructor Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="PasswordCheckerUtility()"><!-- --></A><H3>
PasswordCheckerUtility</H3>
<PRE>
public <B>PasswordCheckerUtility</B>()</PRE>
<DL>
</DL>

<!-- ============ METHOD DETAIL ========== -->

<A NAME="method_detail"><!-- --></A>
<TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
<TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
<B>Method Detail</B></FONT></TH>
</TR>
</TABLE>

<A NAME="isValidPassword(java.lang.String)"><!-- --></A><H3>
isValidPassword</H3>
<PRE>
public static boolean <B>isValidPassword</B>(java.lang.String&nbsp;passwordString)
                               throws LengthException,
                                      NoDigitException,
                                      NoUpperAlphaException,
                                      NoLowerAlphaException,
                                      InvalidSequenceException</PRE>
<DL>
	<DD>Returns true if valid password.  Throws exceptions for invalid passwords. 
       				Valid if password is greater than or equal to 6 characters, 
				has at least one digit, 
				has at least on upper-case alphabetic character, 
				has at least on lower-case alphabetic character, 
				and has no more than two of the same character in a row.
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>passwordString</CODE> - - string to be checked for validity
<DT><B>Returns:</B><DD>true if valid password, set up to return false if an invalid password, but throws an exception instead.
<DT><B>Throws:</B>
<DD><CODE>LengthException</CODE> - thrown if length is less than 6 characters
<DD><CODE>NoDigitException</CODE> - thrown if no digit
<DD><CODE>NoUpperAlphaException</CODE> - thrown if no uppercase alphabetic
<DD><CODE>NoLowerAlphaException</CODE> - thrown if no lowercase alphabetic
<DD><CODE>InvalidSequenceException</CODE> - thrown if more than 2 of same character.</DL>
</DD>
</DL>
<HR>

<A NAME="isWeakPassword(java.lang.String)"><!-- --></A><H3>
isWeakPassword</H3>
<PRE>
public static boolean <B>isWeakPassword</B>(java.lang.String&nbsp;passwordString)</PRE>
<DL>
<DD>Return true if length of password is greater than or equal to 6 but less than or equal to 9
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>passwordString</CODE> - - string to be checked if weak password
<DT><B>Returns:</B><DD>true if length of password is greater than or equal to 6 but less than or equal to 9</DL>
</DD>
</DL>
<HR>

<A NAME="invalidPasswords(java.util.ArrayList)"><!-- --></A><H3>
invalidPasswords</H3>
<PRE>
public static java.util.ArrayList&lt;java.lang.String&gt; <B>invalidPasswords</B>(java.util.ArrayList&lt;java.lang.String&gt;&nbsp;passwords)</PRE>
<DL>
<DD>Returns an arraylist of invalid passwords (weak passwords are not considered invalid)
<P>
<DD><DL>
<DT><B>Parameters:</B><DD><CODE>passwords</CODE> - arraylist of passwords to check for validity
<DT><B>Returns:</B><DD>arraylist of invalid passwords. It will not return weak passwords.</DL>
</DD>
</DL>
<!-- ========= END OF CLASS DATA ========= -->
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="class-use/PasswordCheckerUtility.html"><FONT CLASS="NavBarFont1"><B>Use</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="index-files/index-1.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;PREV CLASS&nbsp;
&nbsp;NEXT CLASS</FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="index.html?PasswordCheckerUtility.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="PasswordCheckerUtility.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
<TR>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
  SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
<TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<HR>

</BODY>
</HTML>

/* 
* Class: CMSC204 
* Instructor: Robert Alexander
* Description: A program that tests passwords for their strength.
* Due: 9/15/2021
* Platform/compiler: Eclipse
* @author Nicholas Prakoso;
*/

import java.util.ArrayList;

public class PasswordCheckerUtility {
	private String password;
	private ArrayList<String>invalidPasswords;
	
	public boolean isValidPassword(String passwordString) throws LengthException, NoDigitException, NoUpperAlphaException, NoLowerAlphaException, InvalidSequenceException {
		password = passwordString;
		char c = password.charAt(0);
		
		if (password.length() < 6) {
			throw new LengthException();
		}
		
		if (!Character.isDigit(c)) {
			boolean digit = false;
			
			for(int j = 0; j < password.length(); j++) {
				c = password.charAt(j);
				
				if(Character.isDigit(c)) {
					digit = true;
				}
			}
			if(!digit) {
				throw new NoDigitException();
			}
		}
		
		if(!Character.isUpperCase(c)) {
			boolean passHasUpper = !password.equals(password.toLowerCase());
			if(!passHasUpper) {
			throw new NoUpperAlphaException();
			}
		}
		
		if(!Character.isLowerCase(c)) {
			boolean passHasLower = !password.equals(password.toUpperCase());
			if(!passHasLower) {
				throw new NoLowerAlphaException();
			}
		}
		
		if(Character.isLowerCase(c) || Character.isUpperCase(c) || Character.isDigit(c)) {
			for (int j = 0; j < password.length() - 2; j++) {
				if (password.charAt(j) == password.charAt(j + 1) && (password.charAt(j) == password.charAt(j + 2))) {
					throw new InvalidSequenceException();
				}
			}
		}
		
		return true;
		
		
		
	}
	
	public boolean isWeakPassword(String passwordString) {
		if (passwordString.length() >= 6 && passwordString.length() < 10) {
			return true;
		} else {
			return false;
		}
	}
	
	public ArrayList<String> getInvalidPasswords(ArrayList<String> passwords){
		invalidPasswords = new ArrayList<String>();
		String error = null;
		
		for (int j = 0; j < passwords.size(); j++) {
			try {
				isValidPassword(passwords.get(j));
			}
			catch(LengthException e) {
				error = passwords.get(j) + "The password must be at least 6 characters long";
				invalidPasswords.add(error);
			}
			catch(NoLowerAlphaException e) {
				error = passwords.get(j) + "The password must contain at least one lower case alphabetic character";
				invalidPasswords.add(error);
			}
			catch(NoUpperAlphaException e) {
				error = passwords.get(j) + "The password must contain at least one upper case alphabetic character";
				invalidPasswords.add(error);
			}
			catch(NoDigitException e) {
				error = passwords.get(j) + "The password must contain at least one digit";
				invalidPasswords.add(error);
			}
			catch(InvalidSequenceException e) {
				error = passwords.get(j) + "The password cannot contain more than two of the same character in sequence";
				invalidPasswords.add(error);
			}
		}
		return invalidPasswords;
	}
}



import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import javax.swing.JFrame;

public class PasswordDriverFX extends Application{
	
   
   public static void main(String[] args){
	   launch(args);
   }
   
   public void start(Stage stage)
   {

	   //call the main scene which is a BorderPane
	   PasswordMain mainPane = new PasswordMain();
	   //PasswordMain root = mainPane.getTopContainer();
	   Scene scene = new Scene(mainPane, 550, 350);
	   stage.setScene(scene);
	   stage.setTitle("Password Checker");
	   stage.show();
   }
   
}



import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;

import javafx.application.Platform;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.control.Tooltip;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

import java.text.*;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;




public class PasswordMain extends BorderPane
{
	private Label passwordLabel, passwordALabel, instruction1Label, instruction2Label,instruction3Label,instruction4Label;
	private Label instruction5Label, instruction6Label;
	//private PasswordField passwordText, passwordAText ;
	private TextField passwordText, passwordAText ;
	private TextField passwordText0, passwordAText0 ;
	private ArrayList<String> illegalPasswords;
	private Button checkPwdButton, exitButton, checkPwdsInFileButton;
	DecimalFormat format = new DecimalFormat("#0.000");
	private Alert alert = new Alert(AlertType.INFORMATION);
	//PasswordCheckerUtility pwdChecker;
	
	public PasswordMain()
	{
		//pwdChecker = new PasswordCheckerUtility();
		illegalPasswords = new ArrayList<String>();
		
		VBox subpanel = new VBox();
		instruction1Label = new Label("Use the following rules when creating your passwords:");
		instruction2Label = new Label("\t1.  Length must be greater than 6; a strong password will contain at least 10 characters");
		instruction3Label = new Label("\t2.  Must contain at least one upper case alpha character");
		instruction4Label = new Label("\t3.  Must contain at least one lower case alpha character");
		instruction5Label = new Label("\t4.  Must contain at least one numeric charcter");
		instruction6Label = new Label("\t5.  May not have more than 2 of the same character in sequence");
		VBox.setMargin(instruction1Label, new Insets(2,10,2,10));
		VBox.setMargin(instruction2Label, new Insets(2,10,2,10));
		VBox.setMargin(instruction3Label, new Insets(2,10,2,10));
		VBox.setMargin(instruction4Label, new Insets(2,10,2,10));
		VBox.setMargin(instruction5Label, new Insets(2,10,2,10));
		VBox.setMargin(instruction6Label, new Insets(2,10,2,10));

		subpanel.setAlignment(Pos.CENTER_LEFT);
		subpanel.getChildren().addAll(instruction1Label, instruction2Label, instruction3Label,
				instruction4Label, instruction5Label, instruction6Label);
		
		HBox subpanel1a = new HBox();
		passwordLabel = new Label ("Password");
		//passwordText = new PasswordField();
		passwordText = new TextField();
		passwordText0 = new TextField();
		HBox.setMargin(passwordLabel, new Insets(10,10,10,10));
		HBox.setMargin(passwordText, new Insets(10,10,10,10));
		subpanel1a.setAlignment(Pos.CENTER);
		subpanel1a.getChildren().addAll(passwordLabel, passwordText);
		
		HBox subpanel1b = new HBox();
		passwordALabel = new Label ("Re-type\nPassword");
		//passwordAText = new PasswordField();
		passwordAText = new TextField();
		passwordAText0 = new TextField();
		HBox.setMargin(passwordALabel, new Insets(10,10,10,10));
		HBox.setMargin(passwordAText, new Insets(10,10,10,10));
		subpanel1b.setAlignment(Pos.CENTER);
		subpanel1b.getChildren().addAll(passwordALabel, passwordAText);
		
		VBox subpanel1 = new VBox();
		VBox.setMargin(subpanel1a, new Insets(10,10,10,10));
		VBox.setMargin(subpanel1b, new Insets(10,10,10,10));
		subpanel1.setAlignment(Pos.CENTER);
		subpanel1.getChildren().addAll(subpanel1a, subpanel1b);
				
		checkPwdsInFileButton = new Button("Check Passwords in _File");
		checkPwdsInFileButton.setMnemonicParsing(true); 
		checkPwdsInFileButton.setTooltip(new Tooltip("Select to read passwords from a file"));
		checkPwdsInFileButton.setOnAction(
        		event -> {
        			try {
						readFile();
					} catch (Exception e) {
						e.printStackTrace();
					}
        		});
		
		checkPwdButton = new Button ("Check _Password");
		checkPwdButton.setMnemonicParsing(true); 
		checkPwdButton.setTooltip(new Tooltip("Select to check a password."));
		checkPwdButton.setOnAction(
        		event -> {
        			addPassword();
        		});
		
		exitButton = new Button("E_xit");
		//_ in label specifies that the next character is the mnemonic, ie, type Alt-e as a shortcut
	    //this activates the mnemonic on exitButton when the Alt key is pressed
	    exitButton.setMnemonicParsing(true);  
	    exitButton.setTooltip(new Tooltip("Select to close the application"));
	    //use a lambda expression for the EventHandler class for exitButton
	    exitButton.setOnAction(
        		event -> {
	            	 Platform.exit();
	                 System.exit(0);
        		}
        	);
		 
	
		HBox buttonPanel = new HBox();
		HBox.setMargin(checkPwdButton, new Insets(10,10,10,10));
		HBox.setMargin(checkPwdsInFileButton, new Insets(10,10,10,10));
		HBox.setMargin(exitButton, new Insets(10,10,10,10));
		buttonPanel.setAlignment(Pos.CENTER);
		buttonPanel.getChildren().addAll(checkPwdButton, checkPwdsInFileButton, exitButton);

		//panelContainer = new 
		setTop(subpanel);
		setCenter(subpanel1);
		setBottom(buttonPanel);

	
	}

	public void addPassword() {
		//Get information
		String passwordString = passwordText.getText();
		String passwordAString = passwordAText.getText();
		try
		{
			if (passwordString.compareTo(passwordAString)!=0)
				throw new UnmatchedException();
			if (PasswordCheckerUtility.isValidPassword(passwordString)) {
				if (PasswordCheckerUtility.isWeakPassword(passwordString)) {
					alert.setContentText("Password is OK but weak");
					alert.showAndWait();
					//JOptionPane.showMessageDialog(null, "Password is OK but weak", "Password Status", JOptionPane.PLAIN_MESSAGE);
				}
				else {
					alert.setContentText("Password is valid");
					alert.showAndWait();
					//JOptionPane.showMessageDialog(null, "Password is valid", "Password Status", JOptionPane.PLAIN_MESSAGE);
				}	
			}
		}
		catch (UnmatchedException ex)
		{
			alert.setContentText(ex.getMessage());
			alert.showAndWait();
			//JOptionPane.showMessageDialog(null, ex.getMessage(), "Password Status", JOptionPane.PLAIN_MESSAGE);
		}
		catch (Exception ex)
		{
			alert.setContentText(ex.getMessage());
			alert.showAndWait();
			//JOptionPane.showMessageDialog(null, ex.getMessage(), "Password Error", JOptionPane.PLAIN_MESSAGE);
		}			
	}


	//Listens for the Display Apps button to be pressed
	private class displayIllegalPasswords implements ActionListener
	{
		public void actionPerformed (ActionEvent theEvent)
		{
			String result = "";
			for(String temp:illegalPasswords)
				result += temp + "\n";
			alert.setContentText("Illegal Passwords\n"+result);
			alert.showAndWait();
			//JOptionPane.showMessageDialog(null, result, "Illegal Passwords", JOptionPane.PLAIN_MESSAGE);
		}
	}

	public void readFile() {
			FileChooser chooser = new FileChooser();
			Scanner input;
			File selectedFile = chooser.showOpenDialog(null);
			if(selectedFile != null)
			   {
				ArrayList<String> passwords = new ArrayList<String>();
				String results = "";
				try{
				input = new Scanner(selectedFile);
				
				
				while(input.hasNext())
				{
					passwords.add(input.next());
				}
				illegalPasswords = PasswordCheckerUtility.validPasswords(passwords);
				//should be getInvalidPasswords(...);
				for(String passwordString : illegalPasswords)
					results += passwordString +"\n";
				alert.setContentText("Illegal Passwords\n"+results);
				alert.showAndWait();
				//JOptionPane.showMessageDialog(null, results, "Illegal Passwords", JOptionPane.PLAIN_MESSAGE);
			}// end of try
				catch(FileNotFoundException ex)
				{
					alert.setContentText("File Error\n" + ex.toString());
					alert.showAndWait();
					//JOptionPane.showMessageDialog(null, ex.toString(), "File Error", JOptionPane.PLAIN_MESSAGE);
					ex.printStackTrace();
				}
			}
		}
}

a1Ab1Bc1Cd1D#
334455BB
Im2#cool4U
george2#ZZZ
4Sale#
bertha22#
4wardMarch#
august30
abcdef
Applesxx
aa11b
pilotProject
myPassword
myPassword2#

public class UnmatchedException extends Exception {
	
	public UnmatchedException() {
		super("The passwords do not match");
	}
	
}


public class WeakPasswordException extends Exception {
	
	public WeakPasswordException() {
		super("The password is OK but weak - it contains fewer than 10 characters");
	}
	
}


public class InvalidSequenceException extends Exception {
	
	public InvalidSequenceException() {
		super("The password cannot contain more than two of the same character in sequence");
	}
	
}


public class LengthException extends Exception {
	
	public LengthException() {
		super("The password must be at least 6 characters long");
	}
	
}


public class NoDigitException extends Exception {
	
	public NoDigitException() {
		super("The password must contain at least one digit");
	}
	
}


public class NoLowerAlphaException extends Exception {

	public NoLowerAlphaException() {
		super("The password must contain at least one lowercase alphabetic character");
	}
	
}


public class NoSpecialCharacterException extends Exception {

	public NoSpecialCharacterException() {
		super("The password must contain at least one special character");
	}
	
}
