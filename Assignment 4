/* 
* Class: CMSC204 
* Instructor: Robert Alexander
* Description: A program that creates a database of courses
* Due: 10/27/2021
* Platform/compiler: Eclipse
* @author Nicholas Prakoso;
*/

public class CourseDBElement implements Comparable {
	private String ID;
	private int CRN;
	private String roomNumber;
	private String instructorName;
	private int numOfCredits;
	
	public CourseDBElement() {
		ID = "";
		CRN = 0;
		roomNumber = "";
		instructorName = "";
		numOfCredits = 0;
	}
	
	public CourseDBElement(String ID, int numOfCredits, int CRN, String roomNumber, String instructorName) {
		this.ID = ID;
		this.CRN = CRN;
		this.roomNumber = roomNumber;
		this.instructorName = instructorName;
		this.numOfCredits = numOfCredits;
	}
	
	public int getCRN() {
		return CRN;
	}
	
	public void setCRN(int CRN) {
		this.CRN = CRN;
	}
	
	public int hashCode() {
		String s = CRN + "";
		return s.hashCode();
	}
	
	public int compareTo(CourseDBElement element) {
		return(this.CRN - element.CRN);
	}
	
	public boolean equals(Object o) {
		if(this == o) {
			return true;
		}
		if(o == null) {
			return false;
		}
		if(getClass() != o.getClass()) {
			return false;
		}
		CourseDBElement different = (CourseDBElement) o;
		if(CRN != different.CRN) {
			return false;
		}
		return true;
	}
	
	public String toString() {
		String s = "\nCourse: " + ID + " CRN: " + CRN + " Credits: " + numOfCredits + " Instructor: " + instructorName + " Room: " + roomNumber;
		return s;
	}
}



import java.io.IOException;
import javafx.application.Application;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class CourseDBGUI extends Application {  
	/**
	 * The main method for the GUI JavaFX version
	 * @param args not used
	 * @throws IOException
	 */
	public static void main(String[] args) {
		launch(args);   
	}
	
	@Override
	public void start(Stage stage) throws Exception {
		//  instantiate the FXMainPane, name it root
		FXMainPane root = new FXMainPane();
		//  set the scene to hold root
		stage.setScene(new Scene(root, 600,700));
		//set stage title
		stage.setTitle("Course Database");
		//display the stage
		stage.show();
	}
}

/* 
* Class: CMSC204 
* Instructor: Robert Alexander
* Description: A program that creates a database of courses
* Due: 10/27/2021
* Platform/compiler: Eclipse
* @author Nicholas Prakoso;
*/

import java.util.ArrayList;
import java.util.LinkedList;
import java.io.IOException;
import java.io.File;
import java.util.Scanner;
import java.io.FileNotFoundException;

public class CourseDBManager implements CourseDBManagerInterface {
	private CourseDBStructure CDS = new CourseDBStructure(20);
	
	public void readFile(File input) throws FileNotFoundException{
		try {
			Scanner data = new Scanner(input);
			while(data.hasNext()) {
				String ID = data.next();
				int numOfCredits = data.nextInt();
				String instructorName = data.nextLine();
				int CRN = data.nextInt();
				String roomNumber = data.next();
				add(ID, CRN, numOfCredits, roomNumber, instructorName);
			}
			data.close();
		}
		catch(FileNotFoundException e) {
			System.out.print("File not Found");
			e.getMessage();
		}
	}
	
	public void add(String ID, int CRN, int numOfCredits, String roomNumber, String instructorName) {
		CourseDBElement newEle = new CourseDBElement(ID, CRN, numOfCredits, roomNumber, instructorName);
		CDS.add(newEle);
	}
	
	public CourseDBElement get(int CRN) {
		try {
			return CDS.get(CRN);
		}
		catch(IOException e) {
			e.getMessage();
		}
		return null;
	}
	
	public ArrayList<String> showAll(){
		ArrayList<String> hashList = new ArrayList<String>();
		for(int i = 0; i < CDS.hashTable.length; i++) {
			LinkedList<CourseDBElement> temporaryList = CDS.hashTable[i];
			if(temporaryList != null) {
				for (int k = 0; k < temporaryList.size(); k++) {
					CourseDBElement element = temporaryList.get(k);
					hashList.add(element.toString());
				}
			}
		}
		return hashList;
	}
}



import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This is the Good Faith Attempt test file for the CourseDBManager
 * @author ralexander
 */
public class CourseDBManager_GFA_Test {
	private CourseDBManagerInterface dataMgr = new CourseDBManager();

	/**
	 * Create an instance of CourseDBManager
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		dataMgr = new CourseDBManager();
	}

	/**
	 * Set dataMgr reference to null
	 * @throws Exception
	 */
	@After
	public void tearDown() throws Exception {
		dataMgr = null;
	}

	/**
	 * Test for the createConcordanceArray method
	 * Use the String text created in setUp()
	 */
	@Test
	public void testAddToDB() {
		try {
			dataMgr.add("CMSC203",30504,4,"SC450","Joey Bag-O-Donuts");
		}
		catch(Exception e) {
			fail("This should not have caused an Exception");
		}
	}

}



import java.io.*;
import java.util.*;

public interface CourseDBManagerInterface {

	public void add(String id, int crn, int credits, String roomNum, String instructor);
	
	public CourseDBElement get(int crn);
	
	public void readFile(File input) throws FileNotFoundException;

	public ArrayList<String> showAll();

}



import static org.junit.Assert.*;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This is the test file for the CourseDBManager
 * which is implemented from the CourseDBManagerInterface
 * 
 * @author ralexander
 *
 */
public class CourseDBManagerTest {
	private CourseDBManagerInterface dataMgr = new CourseDBManager();

	/**
	 * Create an instance of CourseDBManager
	 * @throws Exception
	 */
	@Before
	public void setUp() throws Exception {
		dataMgr = new CourseDBManager();
	}

	/**
	 * Set dataMgr reference to null
	 * @throws Exception
	 */
	@After
	public void tearDown() throws Exception {
		dataMgr = null;
	}

	/**
	 * Test for the add method
	 */
	@Test
	public void testAddToDB() {
		try {
			dataMgr.add("CMSC203",30504,4,"SC450","Joey Bag-O-Donuts");
		}
		catch(Exception e) {
			fail("This should not have caused an Exception");
		}
	}
	
	/**
	 * Test for the showAll method
	 */
	@Test
	public void testShowAll() {
		dataMgr.add("CMSC203",30504,4,"SC450","Joey Bag-O-Donuts");
		dataMgr.add("CMSC203",30503,4,"SC450","Jill B. Who-Dunit");
		dataMgr.add("CMSC204",30559,4,"SC450","BillyBob Jones");
		ArrayList<String> list = dataMgr.showAll();
		
		assertEquals(list.get(0),"\nCourse:CMSC203 CRN:30503 Credits:4 Instructor:Jill B. Who-Dunit Room:SC450");
		assertEquals(list.get(1),"\nCourse:CMSC203 CRN:30504 Credits:4 Instructor:Joey Bag-O-Donuts Room:SC450");
		assertEquals(list.get(2),"\nCourse:CMSC204 CRN:30559 Credits:4 Instructor:BillyBob Jones Room:SC450");
			}
	/**
	 * Test for the read method
	 */
	@Test
	public void testRead() {
		try {
			File inputFile = new File("Test1.txt");
			PrintWriter inFile = new PrintWriter(inputFile);
			inFile.println("CMSC203 30504 4 SC450 Joey Bag-O-Donuts");
			inFile.print("CMSC203 30503 4 SC450 Jill B. Who-Dunit");
			
			inFile.close();
			dataMgr.readFile(inputFile);
			//System.out.println(dataMgr.showAll());
		} catch (Exception e) {
			fail("Should not have thrown an exception");
		}
	}
}

/* 
* Class: CMSC204 
* Instructor: Robert Alexander
* Description: A program that creates a database of courses
* Due: 10/27/2021
* Platform/compiler: Eclipse
* @author Nicholas Prakoso;
*/

import java.util.*;
import java.io.IOException;

public class CourseDBStructure implements CourseDBStructureInterface {
	protected int size;
	protected LinkedList<CourseDBElement> hashTable[];
	
	public CourseDBStructure(int size) {
		this.size = size;
		hashTable = new LinkedList[size];
	}
	
	public CourseDBStructure(String test, int size) {
		this.size = size;
		hashTable = new LinkedList[size];
	}
	
	public CourseDBElement get(int CRN) throws IOException{
		String s = CRN + "";
		int i = s.hashCode() % size;
		if(hashTable[i] == null) {
			throw new IOException();
		} else {
			for(int j = 0; j < size; j++) {
				CourseDBElement temporary = hashTable[i].get(j);
				if(temporary.getCRN() == CRN) {
					return temporary;
				}
			}
			return null;
		}
	}
	
	public void add(CourseDBElement element) {
		int i = element.hashCode() % size;
		if(hashTable[i] == null) {
			hashTable[i] = new LinkedList<CourseDBElement>();
		}
		hashTable[i].add(element);
	}
	
	public int getTableSize() {
		return size;
	}
}



import java.io.*;
import java.util.*;

/**
 * This is the interface to the Course Database Structure Class.  It is the data structure
 * class that is used with the Course Database Manager class.
 * This is a hash table with buckets.  Your hash table with be an array of 
 * linked lists of CourseDatabaseElements. Use the hashcode for a 
 * CourseDatabaseElement to find the location in the hash table for the linked lists of  
 * CourseDatabaseElements.
 * 
 * There should be two constructors.  The first one takes in an integer which represents the
 * estimated size of the hash table. 
 * 
 * Since the requirement is for a closed-addressing hash table (bucket hashing), 
 * you will not need to compute a 4k+3 prime.
 * 
 * If you were doing open-addressing, you would determine the size of the table by using a loading
 * factor of 1.5 and a 4K+3 prime.  Example: if you estimated 500 words, 500/1.5 = 333.  
 * The next 4K+3 prime over 333 is 347.  So the tableSize would be 347.
 * 
 * The other constructor will take in a String and an int.  The string will be "Testing"
 * and the int will be the size of the hash table.  This is used only for testing. 
 */
public interface CourseDBStructureInterface {
	/** 
	* Use the hashcode of the CourseDatabaseElement to see if it is 
	* in the hashtable.
	* 
	* If the CourseDatabaseElement does not exist in the hashtable,
	* add it to the hashtable.
	* 
	* @param element the CDE to be added
	*/
	public void add(CourseDBElement element);
	
	/** 
	* Use the hashcode of the CourseDatabaseElement to see if it is 
	* in the hashtable.
	* 
	* If the CourseDatabaseElement is in the hashtable, return it
	* If not, throw an IOException
	* 
	* @param element the CDE to be added
	 * @throws IOException 
	*/
	public CourseDBElement get(int crn) throws IOException;

	/**
	* Returns the size of the ConcordanceDataStructure (number of indexes in the array)
	*/
	public int getTableSize();

}



import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.LinkedList;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * This is the test file for the CourseDBManager
 * which is implemented from the CourseDBManagerInterface
 * @author Professor Kartchner
 */
public class CourseDBStructureTest {
	CourseDBStructure cds, testStructure;

	@Before
	public void setUp() throws Exception {
		cds = new CourseDBStructure(20);
		testStructure = new CourseDBStructure("Testing", 20);
	}

	@After
	public void tearDown() throws Exception {
		cds = testStructure = null;
	}
	
	/**
	 * Test the tableSize for CourseDBStructures constructed
	 * with both constructors
	 */
	@Test
	public void testGetTableSize()
	{
		assertEquals(20, cds.getTableSize());
		assertEquals(20, testStructure.getTableSize());		
	}
	
	/**
	 * Test the hashTable for CourseDBStructures constructed
	 * with both constructors
	 */
	@Test
	public void testHashTable()
	{
		//CourseDBStructure cds = new CourseDBStructure(500);
		assertEquals(20, cds.hashTable.length);
		CourseDBElement cde = new CourseDBElement("CMSC500", 39999, 4, "SC100", "Nobody InParticular"); 
		cds.add(cde);
		LinkedList<CourseDBElement> list = cds.hashTable[cde.hashCode()%cds.getTableSize()];
		assertEquals(39999, list.get(0).getCRN());
		
		cds = new CourseDBStructure("Testing",20);
		assertEquals(20, cds.hashTable.length);	
		cds.add(cde);
		list = cds.hashTable[cde.hashCode()%20];
		assertEquals(39999, list.get(0).getCRN());
	}
}

CMSC100 21556 2 Distance-Learning Janet E. Joy 
CMSC100 22344 2 SW217 Gloria E. Barron	 
CMSC100 22974 2 Distance-Learning Janet E. Joy
CMSC110 21561 3 SC451 Rabiha J. Kayed
CMSC110 20484 3 HT300 Madhvi A. Shah 	
CMSC110 23363 3 SC451 Sascha Simkanich 	
CMSC110 21565 3 Distance Learning Janet E. Joy
CMSC110 21564 3 SC451 Behzad Maghami
CMSC110 21560 3 SC450 Behzad Maghami




import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import javax.swing.JOptionPane;

import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.TitledPane;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.Tooltip;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;

/**
 * This panel is the basic panel, inside which other panels are placed.  
 * Before beginning to implement, design the structure of your GUI in order to 
 * understand what panels go inside which ones, and what buttons or other components
 * go in which panels.  
 * @author ralexander
 *
 */
//make the main panel's layout be a VBox
public class FXMainPane extends VBox {
	
	private RadioButton courseFile, courseArray;
	Button inputButton, dbButton, showDB, getCourse, selectFile, selectArray, clear, exit, findCourseButton;
	Label label1= new Label("Course ID");
	Label label2= new Label("CRN");
	Label label3= new Label("Credits");
	Label label4= new Label("Room Number");
	Label label5= new Label("Instructor");
	Label label6= new Label("CRN to retrieve");

	private File inputFile;
	ToggleGroup group;
	TextField textfield1, textfield2, textfield3, textfield4, textfield5, DBTextField, textfield6;
	//  declare two HBoxes
	HBox hBox1, hBox2, hBox3;
	//declare five VBoxes
	VBox vBox1, vBox2, vBox3, vBox4, vBox5, vBox6;
	private Alert alert = new Alert(AlertType.INFORMATION);
	
	//  declare an instance of DataManager
	CourseDBManager dataMgr;
	
	public void createRadioButtons () {
		
		HBox radioPanel = new HBox();
		
		courseFile = new RadioButton("Create Database from File     ");
		courseArray = new RadioButton("Add to Database from Fields");
		group = new ToggleGroup();
		courseFile.setToggleGroup(group);
		courseArray.setToggleGroup(group);
		courseFile.setSelected(true);
		dbButton.setDisable(true);
		showDB.setDisable(true);
		getCourse.setDisable(true);
		textfield1.setDisable(true);
		textfield2.setDisable(true);
		textfield3.setDisable(true);
		textfield4.setDisable(true);
		textfield5.setDisable(true);
		
		textfield6.setDisable(true);
		label6.setDisable(true);
		findCourseButton.setDisable(true);
		
		courseFile.setOnAction(new RadioListener());
		courseArray.setOnAction(new RadioListener());
		
		radioPanel.getChildren().addAll(courseFile,courseArray);
		TitledPane radioTitlePane = new TitledPane("Please Select from Following Options:",
				radioPanel);
		radioTitlePane.setCollapsible(false);
		Insets inset = new Insets(100, 10, 100, 10);
		HBox.setMargin(radioPanel,inset);
		getChildren().addAll(radioTitlePane);
	}
	
	private class RadioListener implements EventHandler<ActionEvent> {
		@Override
		public void handle(ActionEvent e) {

			if(courseFile.isSelected())
			{
				// make inputfile button enabled
				inputButton.setDisable(false);
				dbButton.setDisable(true);
				//showDB.setDisable(true);
				findCourseButton.setDisable(true);
				textfield1.setDisable(true);
				textfield2.setDisable(true);
				textfield3.setDisable(true);
				textfield4.setDisable(true);
				textfield5.setDisable(true);

				textfield6.setDisable(true);
				label6.setDisable(true);
				findCourseButton.setDisable(true);		 
			}
			// 
			else
			{
				inputButton.setDisable(true);
				dbButton.setDisable(false);
				//showDB.setDisable(true);
				findCourseButton.setDisable(true);
				//showDB.setDisable(false);
				textfield1.setDisable(false);
				textfield2.setDisable(false);
				textfield3.setDisable(false);
				textfield4.setDisable(false);
				textfield5.setDisable(false);
				
				textfield6.setDisable(true);
				label6.setDisable(true);
				findCourseButton.setDisable(true);
				
				
				//textTitlePane.setVisible(true);
			 
			}
		}
	}

	/**
	 * The MainPanel constructor sets up the entire GUI in this approach.  Remember to
	 * wait to add a component to its containing component until the container has
	 * been created.  This is the only constraint on the order in which the following 
	 * statements appear.
	 */
	FXMainPane() {

		inputButton = new Button("Input File");
		dbButton = new Button("Add to DB");
		showDB = new Button("Show DB");
		getCourse = new Button("Get Course");
		clear = new Button("Clear");
		exit = new Button("Exit");
		findCourseButton = new Button("Find Course");
		
		
		//textfield = new TextField();
		//  instantiate the HBoxes
		hBox1 = new HBox();
		hBox2 = new HBox();
		hBox3 = new HBox();
		//  instantiate the VBoxes
		vBox1 = new VBox();
		vBox2 = new VBox();
		vBox3 = new VBox();
		vBox4 = new VBox();
		vBox5 = new VBox();
		vBox6 = new VBox();
		textfield1 = new TextField();
		textfield2 = new TextField();
		textfield3 = new TextField();
		textfield4 = new TextField();
		textfield5 = new TextField();
		textfield6 = new TextField();
		
		DBTextField = new TextField();

		inputButton.setOnAction(new ButtonHandler());
		//outputButton.setOnAction(new ButtonHandler());
		dbButton.setOnAction(new ButtonHandler());
		showDB.setOnAction(new ButtonHandler());
		getCourse.setOnAction(new ButtonHandler());
		findCourseButton.setOnAction(new ButtonHandler());

		

		//  instantiate the DataManager instance
		 dataMgr = new CourseDBManager();
		
			
		createRadioButtons();
		
		hBox1.getChildren().addAll(vBox1,vBox2,vBox3,vBox4,vBox5);
	//  add the label and textfield to each of the VBoxes
		vBox1.getChildren().addAll(label1, textfield1);
		vBox2.getChildren().addAll(label2, textfield2);
		vBox3.getChildren().addAll(label3, textfield3);
		vBox4.getChildren().addAll(label4, textfield4);
		vBox5.getChildren().addAll(label5, textfield5);
		vBox6.getChildren().addAll(label6, textfield6, findCourseButton);
		//  add the buttons to the other HBox
		hBox2.getChildren().addAll(inputButton, dbButton, showDB, getCourse, clear,exit);
		hBox3.getChildren().addAll(vBox6);
		//  add the HBoxes to this FXMainPanel (a VBox)
		getChildren().addAll(hBox1,hBox2,hBox3);
		
		clear.setOnAction(new ButtonHandler());
		exit.setOnAction(new ButtonHandler());
		
		hBox1.setAlignment(Pos.CENTER);
		hBox2.setAlignment(Pos.CENTER);
		hBox3.setAlignment(Pos.CENTER);
		
		Insets inset = new Insets(100, 10, 100, 10);
		HBox.setMargin(inputButton, inset);
		HBox.setMargin(dbButton, inset);
		HBox.setMargin(findCourseButton, inset);
		HBox.setMargin(clear, inset);
		HBox.setMargin(exit, inset);
		
		inset = new Insets(30, 10, 10, 10);
		vBox1.setAlignment(Pos.CENTER);
		vBox2.setAlignment(Pos.CENTER);
		vBox3.setAlignment(Pos.CENTER);
		vBox4.setAlignment(Pos.CENTER);
		vBox5.setAlignment(Pos.CENTER);
		vBox6.setAlignment(Pos.CENTER);
		VBox.setMargin(label1, inset);
		VBox.setMargin(label2, inset);
		VBox.setMargin(label3, inset);
		VBox.setMargin(label4, inset);
		VBox.setMargin(label5, inset);
		VBox.setMargin(label6, inset);

		inset = new Insets(1, 10, 10, 10);
		VBox.setMargin(textfield1, inset);
		VBox.setMargin(textfield2, inset);
		VBox.setMargin(textfield3, inset);
		VBox.setMargin(textfield4, inset);
		VBox.setMargin(textfield5, inset);
		VBox.setMargin(textfield6, inset);
		

	}
	
	//  create a private inner class to handle the button clicks
	private class ButtonHandler implements EventHandler<ActionEvent> {

		@Override
		public void handle(ActionEvent event) {
		
			if (event.getTarget()==clear) {
				textfield1.setText("");
				textfield2.setText("");
				textfield3.setText("");
				textfield4.setText("");
				textfield5.setText("");
				textfield6.setText("");
			} else if (event.getTarget()==inputButton) { 
				FileChooser chooser = new FileChooser();
				chooser.setTitle("Choose a file to read from");
				if ((inputFile = chooser.showOpenDialog(null)) != null) {

					if (!inputFile.canRead())
						try {
							throw new IOException();
						} catch (IOException e1) {
							e1.printStackTrace();
						}
		
					try {
						String list = "";
						dataMgr.readFile(inputFile);
					} catch (FileNotFoundException e) {
						e.printStackTrace();
					}
					showDB.setDisable(false);
					getCourse.setDisable(false);
					
				}
			} 
			
			else if (event.getTarget()==dbButton) {
				String id = textfield1.getText();
				String crnStr = textfield2.getText();
				int crn=0; 
				if(!crnStr.equals("")) 
					crn =  Integer.parseInt(crnStr);
				String creditsStr = textfield3.getText();
				int credits=0; 
				if(!creditsStr.equals("")) 
					credits =  Integer.parseInt(creditsStr);
				String roomNum = textfield4.getText();
				String instructor = textfield5.getText();
				//System.out.println(id+" "+crn+" "+credits+" "+roomNum+" "+instructor);
				dataMgr.add(id,crn,credits,roomNum,instructor);
				showDB.setDisable(false);
				getCourse.setDisable(false);
			} else if (event.getTarget()==showDB) {
				//System.out.println(dataMgr.showAll());
				String list = "";
				ArrayList<String> elements = dataMgr.showAll();
				for(String element : elements) {
					list = list+"\n"+element;
				}
				alert.setContentText(list);
				alert.showAndWait();
			}
			else if (event.getTarget()==getCourse) {
				//System.out.println("getCourse button selected");
				textfield6.setDisable(false);
				label6.setDisable(false);
				findCourseButton.setDisable(false);
			}
			else if (event.getTarget()==findCourseButton) {
				//System.out.println("findCourseButton selected");
				String crnStr = textfield6.getText();
				
				CourseDBElement cde = new CourseDBElement();
				cde.setCRN(Integer.parseInt(crnStr));
				System.out.println(dataMgr.get(Integer.parseInt(crnStr)));
				alert.setContentText(""+dataMgr.get(Integer.parseInt(crnStr)));
				alert.showAndWait();
				//System.out.println(cde);
			}
			else if (event.getTarget()==exit) {
				System.exit(0);;
				
			}
		}
		

	}
	private void setupFields() {
		textfield1.setDisable(false);
		textfield2.setDisable(false);
		textfield3.setDisable(false);
		textfield4.setDisable(false);
		textfield5.setDisable(false);
		textfield1.setText("");
		textfield2.setText("");
		textfield3.setText("");
		textfield4.setText("");
		textfield5.setText("");
		textfield1.setDisable(true);
		textfield3.setDisable(true);
		textfield4.setDisable(true);
		textfield5.setDisable(true);
		
	}
	
	
}
	

/* 
* Class: CMSC204 
* Instructor: Robert Alexander
* Description: A program that creates a database of courses
* Due: 10/27/2021
* Platform/compiler: Eclipse
* @author Nicholas Prakoso;
*/

import java.util.*;
import java.io.*;

public interface Comparable {
	int compareTo(CourseDBElement element);
}
